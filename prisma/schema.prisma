// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para organizações/lojistas (white label)
model Organization {
  id             String           @id @default(cuid())
  name           String
  cnpj           String           @unique
  slug           String           @unique // Para uso nas rotas: dominio.com/lojista-slug/login
  logoUrl        String?          // URL da logo do lojista
  loginImageUrl  String?          // URL da imagem da página de login
  coverHeroUrl   String?          // URL da imagem de capa do lojista
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relacionamentos
  users          User[]
  pointsImports  PointsImport[]
  ebooks         Ebook[]
  redemptions    Redemption[]
  
  @@map("organizations")
}

// Modelo de usuários (admin, cliente)
model User {
  id             String           @id @default(cuid())
  cpf            String           @unique
  email          String?          @unique
  fullName       String?
  password       String           // Hash da senha
  points         Int              @default(0)
  role           UserRole         @default(CLIENTE)
  organizationId String?          // Null para admin master
  isActive       Boolean          @default(true)
  firstAccess    Boolean          @default(true) // Para controlar primeiro acesso
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relacionamentos
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  pointsHistory  PointsHistory[]
  redemptions    Redemption[]
  accounts       Account[]
  sessions       Session[]
  
  @@map("users")
}

// Enum para tipos de usuário
enum UserRole {
  ADMIN_MASTER  // Admin principal que gerencia tudo
  CLIENTE       // Cliente final que resgata ebooks
}

// Modelo de ebooks
model Ebook {
  id             String           @id @default(cuid())
  title          String
  author         String
  description    String?
  category       String?
  coverImageUrl  String?          // URL da capa
  ebookFileUrl   String?          // URL do arquivo PDF/EPUB
  pointsCost     Int              @default(1) // Quantos pontos custa (padrão 1 ponto = 1 ebook)
  isActive       Boolean          @default(true)
  organizationId String?          // Null = disponível para todas organizações
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relacionamentos
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  redemptions    Redemption[]
  
  @@map("ebooks")
}

// Modelo de resgates
model Redemption {
  id             String           @id @default(cuid())
  userId         String
  ebookId        String
  organizationId String
  pointsUsed     Int              @default(1)
  redeemedAt     DateTime         @default(now())
  
  // Relacionamentos
  user           User             @relation(fields: [userId], references: [id])
  ebook          Ebook            @relation(fields: [ebookId], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id])
  
  // Evitar resgatar o mesmo ebook mais de uma vez
  @@unique([userId, ebookId])
  @@map("redemptions")
}

// Histórico de pontos recebidos
model PointsHistory {
  id                String           @id @default(cuid())
  userId            String
  pointsAdded       Int
  sourceDescription String           // Ex: "Importação planilha 2024-01-15"
  pointsImportId    String?          // Referência ao import que gerou esses pontos
  createdAt         DateTime         @default(now())
  
  // Relacionamentos
  user              User             @relation(fields: [userId], references: [id])
  pointsImport      PointsImport?    @relation(fields: [pointsImportId], references: [id])
  
  @@map("points_history")
}

// Modelo para controlar importações de planilhas de pontos
model PointsImport {
  id               String           @id @default(cuid())
  fileName         String           // Nome do arquivo importado
  organizationId   String
  totalRecords     Int              // Total de registros na planilha
  successRecords   Int              @default(0) // Registros processados com sucesso
  errorRecords     Int              @default(0) // Registros com erro
  status           ImportStatus     @default(PROCESSING)
  errorDetails     String?          // JSON com detalhes dos erros
  importedBy       String           // ID do admin que fez o import
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relacionamentos
  organization     Organization     @relation(fields: [organizationId], references: [id])
  pointsHistory    PointsHistory[]
  
  @@map("points_imports")
}

// Enum para status de importação
enum ImportStatus {
  PROCESSING  // Processando
  COMPLETED   // Concluído
  FAILED      // Falhou
  PARTIAL     // Parcialmente concluído (alguns erros)
}

// ===== TABELAS DO NEXTAUTH.JS =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}